!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var o,i,r=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function d(t){try{s(o.next(t))}catch(t){r(t)}}function a(t){try{s(o.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(d,a)}s((o=o.apply(t,e||[])).next())}))},d=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=d(n(1));$("#exampleModal").on("shown.bs.modal",(function(){$("#myInput").trigger("focus")}));const s=new a.default;null===(o=document.getElementById("btn-create-task"))||void 0===o||o.addEventListener("click",t=>r(void 0,void 0,void 0,(function*(){const e=document.forms[0];yield fetch("/create_task",{method:"post",body:new FormData(e)}),yield c(),$("#taskModal").modal("hide"),t.preventDefault()}))),null===(i=document.getElementById("btn-truncate-tasks"))||void 0===i||i.addEventListener("click",t=>r(void 0,void 0,void 0,(function*(){yield fetch("/truncate_tasks",{method:"post",body:""}),yield c(),t.preventDefault()})));const c=()=>r(void 0,void 0,void 0,(function*(){var t;s.taskList=yield s.getTasks("/get_all_tasks");let e=document.getElementsByClassName("task-list")[0];for(;e.firstChild;)e.removeChild(e.firstChild);for(let e of s.taskList){let n=`\n        <div class="card-group">\n            <div class="card text-white bg-secondary mb-3" style="max-width: 18rem;">\n                <div class="card-header">\n                    <div class="date">${e.created_on}</div>\n                        <button type="button" data-id=${e.id} id="btn-delete-task_${e.id}" class="btn btn-danger btn-delete-task">X</button>\n                    </div>\n                <div class="card-body">\n                    <h5 class="card-title">${e.name}</h5>\n                    <p class="card-text">${e.comment?e.comment:""}</p>\n                </div>\n            </div>\n        </div>\n        `,o=document.getElementsByClassName("task-list")[0];null==o||o.insertAdjacentHTML("beforeend",n),null===(t=document.getElementById("btn-delete-task_"+e.id))||void 0===t||t.addEventListener("click",t=>r(void 0,void 0,void 0,(function*(){const e=t.target.dataset.id;yield fetch("/remove_task/"+e,{method:"delete",body:""}),yield c(),t.preventDefault()})))}}));c()},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function d(t){try{s(o.next(t))}catch(t){r(t)}}function a(t){try{s(o.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(d,a)}s((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){this.taskList=[]}getTasks(t){return o(this,void 0,void 0,(function*(){let e=yield fetch(t);try{if(e.ok){let t=yield e.json();return console.log(t),Promise.resolve(t)}console.warn("Ошибка HTTP: "+e.status)}catch(t){console.error("Обнаружена ошибка : "+t)}}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,