!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o,r,s=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,s){function c(e){try{l(o.next(e))}catch(e){s(e)}}function i(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}l((o=o.apply(e,t||[])).next())}))},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=c(n(1));console.log("test"),$("#exampleModal").on("shown.bs.modal",(function(){console.log("open window"),$("#myInput").trigger("focus")}));const l=new i.default;l.defaultTaskList;null===(o=document.getElementById("btn-create-task"))||void 0===o||o.addEventListener("click",e=>s(void 0,void 0,void 0,(function*(){console.log("on submit");const t=document.forms[0];fetch("/create_task",{method:"post",body:new FormData(t)}),console.log("We send post asynchronously (AJAX)"),e.preventDefault()}))),null===(r=document.getElementById("btn-truncate-tasks"))||void 0===r||r.addEventListener("click",e=>s(void 0,void 0,void 0,(function*(){fetch("/truncate_tasks",{method:"post",body:""}),console.log("We send post asynchronously (AJAX)"),e.preventDefault()})));(()=>{console.log("run");s(void 0,void 0,void 0,(function*(){console.log("UrlTaskList","/get_all_tasks");const e=yield l.getTaskList("/get_all_tasks");for(let t of e){console.log(t.name);let e=`\n        <div class="card-group">\n            <div class="card text-white bg-secondary mb-3" style="max-width: 18rem;">\n                <div class="card-header">${t.created_on}</div>\n                <div class="card-body">\n                    <h5 class="card-title">${t.name}</h5>\n                    <p class="card-text">${t.comment?t.comment:""}</p>\n                </div>\n            </div>\n        </div>\n        `,n=document.getElementsByClassName("task-list")[0];console.log(n),null==n||n.insertAdjacentHTML("beforeend",e)}}))})()},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,s){function c(e){try{l(o.next(e))}catch(e){s(e)}}function i(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.defaultTaskList=["Напилить дров","Побелка в зале","Прибраться где были уточки","Покосить","Заштопать карманы"]}getTaskList(e){return o(this,void 0,void 0,(function*(){let t=yield fetch(e);try{if(t.ok){let e=yield t.json();return console.log(e),Promise.resolve(e)}console.warn("Ошибка HTTP: "+t.status)}catch(e){console.error("Обнаружена ошибка : "+e)}}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy90YXNrLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29uc29sZSIsImxvZyIsIiQiLCJvbiIsInRyaWdnZXIiLCJ0YXNrTGlzdCIsImRlZmF1bHRUYXNrTGlzdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImZvcm0iLCJmb3JtcyIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIkZvcm1EYXRhIiwicHJldmVudERlZmF1bHQiLCJsaXN0IiwiZ2V0VGFza0xpc3QiLCJ0YXNrIiwiaXRlbSIsImNyZWF0ZWRfb24iLCJjb21tZW50IiwibGlzdEVsZW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwicnVuIiwidGhpcyIsInVybCIsInJlc3BvbnNlIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ3YXJuIiwic3RhdHVzIiwiZXJyIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixF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Qyx1REFDUDZDLEVBQUtHLFFBQVVILEVBQUtHLFFBQVUsK0VBSzdEQyxFQUFjakIsU0FBU2tCLHVCQUF1QixhQUFhLEdBQy9EekIsUUFBUUMsSUFBSXVCLEdBQ1pBLFdBQWFFLG1CQUFtQixZQUFZTCxRQXFCcERNLEksOFlDaERBLFVBNUJBLE1BRUksY0FDSUMsS0FBS3RCLGdCQUFrQixDQUNuQixnQkFDQSxpQkFDQSw2QkFDQSxXQUNBLHFCQUdILFlBQVl1QixHLHlDQUNiLElBQUlDLFFBQWlCakIsTUFBTWdCLEdBQzNCLElBQ0ksR0FBSUMsRUFBU0MsR0FBSSxDQUNiLElBQUlDLFFBQWFGLEVBQVNFLE9BRTFCLE9BREFoQyxRQUFRQyxJQUFJK0IsR0FDTEMsUUFBUUMsUUFBUUYsR0FFdkJoQyxRQUFRbUMsS0FBSyxnQkFBa0JMLEVBQVNNLFFBR2hELE1BQU1DLEdBQ0ZyQyxRQUFRc0MsTUFBTSx1QkFBdUJEIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCBUYXNrIGZyb20gJy4vdGFzayc7XG5jb25zb2xlLmxvZygndGVzdCcpO1xuJCgnI2V4YW1wbGVNb2RhbCcpLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnb3BlbiB3aW5kb3cnKTtcbiAgICAkKCcjbXlJbnB1dCcpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgfSlcbmNvbnN0IHRhc2tMaXN0ID0gbmV3IFRhc2s7XG5jb25zdCBkZWZhdWx0VGFza0xpc3QgPSB0YXNrTGlzdC5kZWZhdWx0VGFza0xpc3Q7XG5jb25zdCBVcmxUYXNrTGlzdCA9ICcvZ2V0X2FsbF90YXNrcyc7XG5jb25zdCBVcmxDbGVhclRhc2tMaXN0ID0gJy90cnVuY2F0ZV90YXNrcyc7XG5jb25zdCBVcmxSZW1vdmVUYXNrID0gJy9yZW1vdmVfdGFzaydcbmNvbnN0IFVybENyZWF0ZVRhc2sgPSAnL2NyZWF0ZV90YXNrJ1xuXG5pbnRlcmZhY2UgRE9NRXZlbnQ8VCBleHRlbmRzIEV2ZW50VGFyZ2V0PiBleHRlbmRzIEV2ZW50IHtcbiAgdGFyZ2V0OiBUXG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLWNyZWF0ZS10YXNrXCIpPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixhc3luYyAoZSkgPT57XG4gICAgY29uc29sZS5sb2coJ29uIHN1Ym1pdCcpO1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5mb3Jtc1swXTtcbiAgICBmZXRjaChVcmxDcmVhdGVUYXNrLCB7bWV0aG9kOidwb3N0JywgYm9keTogbmV3IEZvcm1EYXRhKGZvcm0pfSk7XG5cbiAgICBjb25zb2xlLmxvZygnV2Ugc2VuZCBwb3N0IGFzeW5jaHJvbm91c2x5IChBSkFYKScpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbn0pXG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tdHJ1bmNhdGUtdGFza3MnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGFzeW5jIChlKSA9PntcbiAgICBmZXRjaChVcmxDbGVhclRhc2tMaXN0LCB7bWV0aG9kOidwb3N0Jyxib2R5OicnfSk7XG5cbiAgICBjb25zb2xlLmxvZygnV2Ugc2VuZCBwb3N0IGFzeW5jaHJvbm91c2x5IChBSkFYKScpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbn0pXG5cblxuXG5cblxuY29uc3QgYnVpbGRUYXNrTGlzdCA9IGFzeW5jICggKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1VybFRhc2tMaXN0JyxVcmxUYXNrTGlzdCk7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IHRhc2tMaXN0LmdldFRhc2tMaXN0KFVybFRhc2tMaXN0KTtcbiAgICBmb3IobGV0IHRhc2sgb2YgbGlzdCl7XG4gICAgICAgIGNvbnNvbGUubG9nKHRhc2submFtZSk7XG4gICAgICAgIGxldCBpdGVtID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgdGV4dC13aGl0ZSBiZy1zZWNvbmRhcnkgbWItM1wiIHN0eWxlPVwibWF4LXdpZHRoOiAxOHJlbTtcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIj4ke3Rhc2suY3JlYXRlZF9vbn08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cImNhcmQtdGl0bGVcIj4ke3Rhc2submFtZX08L2g1PlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImNhcmQtdGV4dFwiPiR7dGFzay5jb21tZW50ID8gdGFzay5jb21tZW50IDogJyd9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICBsZXQgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YXNrLWxpc3QnKVswXTtcbiAgICAgICAgY29uc29sZS5sb2cobGlzdEVsZW1lbnQpO1xuICAgICAgICBsaXN0RWxlbWVudD8uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLGl0ZW0pO1xuICAgIH1cblxufVxuXG5jb25zdCBydW4gPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3J1bicpO1xuICAgIC8vINC+0LHRgNCw0LHQvtGC0YfQuNC6INGD0LTQsNC70LXQvdC40Y8g0LfQsNC00LDRh9C4XG4gICAgY29uc3QgZGVsZXRlVGFzayA9IGFzeW5jIChlOkRPTUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KT0+e1xuICAgICAgICBhbGVydCgwKTtcbiAgICAgICAgY29uc3QgaWQgPSBlLnRhcmdldDtcbiAgICAgICAgY29uc29sZS5sb2coJ2UnLGUsZS50YXJnZXQpO1xuICAgICAgICBmZXRjaChgJHtVcmxSZW1vdmVUYXNrfS8ke2lkfWAsIHttZXRob2Q6J2RlbGV0ZScsYm9keTonJ30pO1xuXG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBidWlsZFRhc2tMaXN0KCk7XG5cbn1cblxucnVuKCk7IiwiY2xhc3MgVGFzayB7XG4gICAgZGVmYXVsdFRhc2tMaXN0OiBzdHJpbmdbXTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VGFza0xpc3QgPSBbXG4gICAgICAgICAgICAn0J3QsNC/0LjQu9C40YLRjCDQtNGA0L7QsicsXG4gICAgICAgICAgICAn0J/QvtCx0LXQu9C60LAg0LIg0LfQsNC70LUnLFxuICAgICAgICAgICAgJ9Cf0YDQuNCx0YDQsNGC0YzRgdGPINCz0LTQtSDQsdGL0LvQuCDRg9GC0L7Rh9C60LgnLFxuICAgICAgICAgICAgJ9Cf0L7QutC+0YHQuNGC0YwnLFxuICAgICAgICAgICAgJ9CX0LDRiNGC0L7Qv9Cw0YLRjCDQutCw0YDQvNCw0L3RiydcbiAgICAgICAgXVxuICAgIH1cbiAgIGFzeW5jIGdldFRhc2tMaXN0KHVybDpzdHJpbmcpe1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHsgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCLQntGI0LjQsdC60LAgSFRUUDogXCIgKyByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYNCe0LHQvdCw0YDRg9C20LXQvdCwINC+0YjQuNCx0LrQsCA6ICR7ZXJyfWApXG4gICAgICAgIH1cblxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFRhc2s7Il0sInNvdXJjZVJvb3QiOiIifQ==